---
title: "Язык программирования R для анализа данных: лекция 1"
author: "Елена Убогоева"
execute: 
  echo: true
format: 
  revealjs:
    slide-number: c/t
    # mainfont: Arial
    # fontsize: 14px
    theme: [default, custom.scss]
    # theme: [serif]
    # mouse-wheel: true
    auto-play-media: true
    width: 1280
    height: 720
editor: visual
---

## Информация о курсе

-   12 лекций по одной лекции в неделю в воскресенье в 12 и в четверг в 19.00

-   Домашние задания

## Установка R и RStudio и начало работы

-   [Скачать](https://cran.r-project.org/bin/windows/base/) и установить свежую версию R с официального сайта (CRAN);

-   [Скачать](https://posit.co/download/rstudio-desktop/#download) и установить IDE RStudio;

-   Больше рекомендаций и решений возможных проблем при установке можно почитать [здесь](https://ubogoeva.github.io/Rcourse_NSU/posts/welcome/how_to_install_R.html);

-   Advanced: [настройка](https://telegra.ph/R-how-to-organize-work-08-08) проектов и лайфхаки при работе в RStudio.

## Рекомендуемая литература

::: columns
::: {.column width="65%"}
Большая часть литературы по R на английском, однако начинают появляться в том числе материалы на русском.

-   [R4DataScience](https://r4ds.hadley.nz/) - книга от центрального разработчика `tidyverse` Hadley Wickham и Garrett Grolemund.

-   [Анализ данных и статистика в R](https://pozdniakov.github.io/tidy_stats/index.html) (автор Иван Поздняков).

-   [Введение в язык программирования R](https://textbook.rintro.ru/index.html) (автор Филипп Управителев)

-   Больше литературы [здесь](https://t.me/stats_for_science/25) и [здесь](https://t.me/r_in_action/61)
:::

::: {.column width="35%"}
![](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png){fig-align="right" width="364"}
:::
:::

## План лекции

-   История языка

-   Особенности архитектуры

-   Переменные

-   Векторы

-   Логические операторы

-   Пропущенные значения

## История языка R

::: {#.incremental .incremental}
-   R - язык программирования для статистической обработки данных и визуализации результатов (Википедия).

-   На самом деле R является языком широкого использования, например, с его помощью можно делать сайты, интерактивные приложения (shiny), презентации, писать книги и научные статьи.

-   R является наследником языка S, который был создан в отделе статистики AT&T в её исследовательском подразделении Bell Labs в 1976 году.

-   R был создан в 1991 в департаменте статистики Университета Окленда, Новая Зеландия.

-   Разработчиками R поддерживается CRAN - репозиторий R-пакетов
:::

## Особенности архитектуры языка

R - **интерпретируемый** мультипарадигменный язык программирования

-   Парадигмы программирования:

    -   императивное (процедурное)

    -   функциональное

    -   объект-ориентированное

-   Типизация:

    -   динамическая - не нужно заранее определять тип переменной и тип может меняться в процессе скрипта

    -   нестрогая - происходит неявное приведение типов

## R как калькулятор

Любая книга по базовому R начинается с этого раздела, так что не будем нарушать традицию:

```{r}
40 + 2 # сложение
```

```{r}
20 - 2 # вычитание
```

```{r}
42 * 2 # умножение
```

```{r}
42 / 2 # деление
```

```{r}
2 ^ 4 # возведение в степень
```

## R как калькулятор

Функции для арифметических операторов: `sqrt()`, `log()`

::: incremental
-   Квадратный корень

    ```{r}
    sqrt(16) # квадратный корень, от слова square root
    ```

-   Логарифм

    ```{r}
    log(2) # по какому основанию логарифм?
    ```

-   По умолчанию натуральный логарифм, то есть основание `e`

    ```{r}
    log(exp(1)) # по умолчанию натуральный логарифм
    ```
:::

------------------------------------------------------------------------

Можно задать основание логарифма. Как это сделать, можно узнать, вызвав справку функции `?log`.

```{r}
log(8, 2) # логарифм от числа 8 по основанию 2
log2(8) # тоже логарифм от 8 по основанию 2
# есть также отдельная функция для десятичного логарифма
log10(1000)
```

::: {.callout-tip appearance="simple"}
Для вызова справки можно использовать `?<название функции>,` `help(<название функции>)` или нажать F1 на название функции
:::

## Переменные

Поскольку R является в первую очередь императивным языком программирования, то переменные и оператор присваивания занимают центральную роль. В качестве оператора присваивания используется `<-`.

Можно набрать в RStudio, используя комбинацию клавиш `Alt -` (альт минус) или `Option -` на Mac.

Равно `=` тоже будет работать, но не рекомендуется к использованию.

Попробуем создать переменные:

```{r}
x <- 10
y <- x + 5
```

Почему ничего не появилось в консоли в качестве аутпута?

## Переменные

При создании переменной результат сохраняется и не выводится в консоль, если нам нужно узнать значение переменной, то можно использовать `print(x)` или просто набрать `x` в консоли.

```{r}
print(x)
x
y
```

Также можно посмотреть на переменные во вкладке environment в правом верхнем углу

## Переменные

С точки зрения компьютера в нем создается объект `10`, с которым связывается название переменной `x`. Переменные могут содержать все что угодно: числа, строки, датафреймы.

При создании переменных есть определенные правила:

-   В названии можно использовать латиницу (строчные и заглавные буквы), нижнее подчеркивание (`_`), точки, цифры;

-   нельзя использовать пробелы в названиях переменных;

-   нельзя использовать зарезервированные слова, например, `TRUE`, `FALSE`, `if`, `function`, с полным списком можно ознакомиться, вызвав `?Reserved`.

В R для разделения длинных имен рекомендуется использовать нижнее подчеркивание, например: `data_processed`

## Типы данных

В R существует 4 основных часто использующихся типов векторов.

## Векторы

Векторы являются ключевым типом данных в R, на основе которых строятся более сложные структуры данных.

Вектор - набор данных одного типа. В R существует 4 основных часто использующихся типов векторов.

Основные типы векторов:

-   Логические, logical: `TRUE`, `FALSE`

-   Целочисленные, integer: `1L`, `190L`

-   Дробные, double или с плавающей точкой: `-1.5`, `0.05`, `5`. Еще есть `Inf`, `-Inf`, `NaN`

-   Строковые, character: `'Hello world'`, `'character'`

::: {.callout-note appearance="minimal"}
Целочисленные вектора сопровождаются знаком L и не содержат дробной части
:::

## Логические операторы

::: columns
::: {.column width="50%"}
Можно сравнивать переменные:

```{r}
x == y

y == 15
```

Не путаем операторы сравнения `==` и присваивания `=`
:::

::: {.column width="50%"}
![](https://pozdniakov.github.io/tidy_stats/images/WaCM5x3mvQM.jpg)
:::
:::

## Логические операторы

::: columns
::: {.column width="50%"}
Чтобы проверить на неравенство используем оператор `!=`:

```{r}
logical1 <- x != y
logical1
logical2 <- x != 10
logical2
```
:::

::: {.column width="50%"}
Еще можно сравнивать больше-меньше:

```{r}
x > y
x < y
```
:::
:::

Восклицательный знак означает логическое НЕ (отрицание)

```{r}
!TRUE
!FALSE
```

## Еще немного булевой алгебры

Логическое И: выдаст `TRUE`, если все переменные `TRUE`

```{r}
logical1 & logical2
```

Логическое ИЛИ: будет `TRUE` если хотя бы одна из переменных `TRUE`

```{r}
logical1 | logical2
```
