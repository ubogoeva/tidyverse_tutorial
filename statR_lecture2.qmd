---
title: "Статистика и R: лекция 2"
author: "Elena Ubogoeva"
execute: 
  echo: true
format: 
  revealjs:
    slide-number: c/t
    # mainfont: Arial
    # fontsize: 14px
    theme: [default, custom.scss]
    # theme: [serif]
    # mouse-wheel: true
    auto-play-media: true
    width: 1280
    height: 720
editor: visual
---

## Повторим материал предыдущей лекции

-   Переменные

-   Векторы

    -   Какие бывают типы векторов?

    -   Неявное приведение типов

    -   Индексация векторов: по номеру индекса, логическим вектором

-   Логические операторы: И, ИЛИ, НЕ

-   Пропущенные значения:

    -   Поиск пропущенных значений

    -   Исключение пропущенных значений из вектора

::: callout-important
Важно! Значения в векторе могут быть **только** **одного** типа
:::

## План лекции

-   Матрицы

-   Списки

-   Датафреймы

-   Условия, циклы (и почему циклы лучше не использовать)

-   Написание своих функций

## Матрицы

Почти такое же понимание как и в линейной алгебре.

::: columns
::: {.column width="50%"}
Создадим матрицу (укажем числа и количество строк):

```{r}

M <- matrix(1:20, nrow = 5)
M
```
:::

::: {.column width="50%"}
![](https://habrastorage.org/files/9ec/4ea/93a/9ec4ea93ab9a440e8a293a87df6dc303.gif){width="513"}
:::
:::

Матрица - двухмерный массив данных

Матрица может содержать данные только одного типа.

## Индексация матриц

Для индексации используем квадратные скобки, матрицы имеют два измерения, соответственно надо прописывать оба `matrix[rows, columns]`

::: incremental
-   Поэлементное извлечение

    ```{r}
    M[1, 1] # извлечь элемент первой строки первого столбца матрицы
    M[3, 4] # извлечь элемент третьей строки четвертого столбца матрицы
    ```

-   Извлечь целую строку или столбец

    ```{r}
    M[1, ] # извлечь первую строку
    M[, 4] # извлечь четвертый столбец
    ```
:::

## Индексация матриц

Можно индексировать целыми векторами:

```{r}
M[1:3, ] # извлечь строки с первой по третью
M[1:2, 2:3] # извлечь элементы первой-второй строк второго и третьего столбца
```

```{r}
M[c(3, 1), ] # извлечь третью, первую строку
```

::: {.callout-note appearance="minimal"}
Правила индексации матриц нам очень понадобятся при работе с датафреймами
:::

## Индексация матриц

Также, как и при работе с векторами, часть элементов матрицы можно переписать

Вспомним как для векторов:

```{r}
x <- 1:10
x[5] <- 100
x
```

```{r}
M[1:3, 2:4] <- 100
M
```

## Списки (lists)

Список в R может содержать данные разного типа, даже другие списки. Список можно создать функцией `list`

```{r}
list1 <- list(1:5, 'Hello world', TRUE)
list1
```

## Списки (lists)

Можно создавать сложные вложенные списки

```{r}
list_complex <- list(list1, c('complex list'))
list_complex
```

## Структура листа {.smaller}

У сложных листов удобно посмотреть структуру, используя функцию `str`

```{r}
str(list_complex)

```

Можно создавать именованные листы:

```{r}
named_list <- list(name = 'JoJo', age = 24, sex = 'male')
named_list
```

## Индексация списков

Индексация списков устроена несколько сложнее, чем векторов и матриц.

::: columns
::: {.column width="40%"}
Для начала попробуем индексацию по номеру

```{r}

list1[2]
class(list1[2])
length(list1[2])
```

Получился лист длиной 1. Как же извлечь элемент списка не в виде списка?
:::

::: {.column width="60%"}
Иллюстрация:

![Взято из твиттера \@hadleywickham](https://i.stack.imgur.com/6Vwry.png){fig-align="left" width="629"}
:::
:::

## Индексация списков

Чтобы извлечь элемент листа не в виде списка нужно использовать две квадратные скобки `sample_list[[1]]`

```{r}
list1[[1]]
```

Также можно использовать индексацию по имени

```{r}
named_list$age
```

## Датафреймы

Датафреймы - прямоугольные таблицы и центральный объект всего анализа данных как науки. Нам понадобится много работать с датафреймами.

Попробуем создать датафрейм

```{r}
df <- data.frame(names = c('Lena', 'Yulia', 'Ekaterina'), 
                 education = c('biology', 'biology', 'chemistry'),
                 topics = c('baseR', 'RNA-seq', 'linear_model'))
df

```

## Индексация датафреймов

## Условия и циклы

## Написание своих функций
